知道 ECMAScript 和 JavaScript 的区别:
ECMAScript，是宿主环境中脚本语言的国际 Web 标准。 ECMAScript 规范定义了一种脚本语言实现应该包含的内容；但是，因为它是可扩充的，所以其实现所提供的功能与这个最小集相比可能变化很大。 
ECMAScript 是一种开放的、国际上广为接受的脚本语言规范。 它本身并不是一种脚本语言。浏览器对ECMAScript的接口就是ECMAScript所规定的那些语法标准，你按照ECMAScript语法标准所写的东西，浏览器要能够把它解释执行出来
JavaScript 是 ECMAScript 规范的一种实现。

知道浏览器的一些常见做法（比如给 CSS 特性加前缀）的缘由
要懂得现代前端的一些新技术
比如：
前端自动化工具（Gulp/Grunt等）
模块化（CommonJS，AMD/CMD模块加载器，各种Bundler，ES2015 Modules等）
前端 MV* 框架（Backbone，Angular等）
编译到 CSS 和 JS 的一些语言（Less/Sass/CoffeeScript等）
前端自动化测试工具（Karma，Mocha，Web Driver等）

CSS不能编程？用Less、Sass、Stylus、甚至直接用 Absurd，框架除了Bootstrap还有很多。JS写多了很麻烦？jQuery。移动开发？Zepto.js。结构不好？找框架，Backbone.js是MVC，AngularJS和Ember.js是MVVM，Twitter还弄了个事件驱动框架Flight。库多了要优化加载？RequireJS。

代码质量成问题？Jasmine、QUnit、Mocha做单元测试。各种浏览器都要测？用Karma。测试通过了部署还有问题？持续集成，用Travis CI。用户行为也要测？用Selenium 。样式测试还有 Viff 。觉得JS都够麻烦的？用CoffeeScript。

想做动画？Canvas或SVG还有CSS3帮忙，干掉Flash。SVG太难画？用Snap.svg。想开发游戏？用Canvas。自己写FPS太低？用框架，CreateJS.。2D太幼稚？three.js帮你用WebGL开发3D，还不够给力？asm.js让你在浏览器中拥有虚幻3引擎。

这一堆东西都要配置部署，麻烦，用Grunt，库太多？用Bower管理，项目开始要创建各种文件文件夹？用Yeoman。开源项目太多了，GitHub.上找，不会？学Git。顺便用Jekyll托管博客，不是吧还有Ruby这玩意...SASS也是Ruby写的，等等Sublime Text是Python写的，要写插件？也学一下。调试太难？用Chrome开发者工具，一堆API和功能。

光在电脑浏览器上跑不给力？移动开发HTML5，离开网络就渣了？HTML5离线应用。不如原生应用？用PhoneGap。想调用原生API？开发Firefox OS应用吧。浏览器应用也得会吧，Chrome Firefox都有自己的文档。接着是不是把后端甩了，自己来，装Node.js，所以还得学点服务器知识，想用npm管理node包？linux技巧shell神马的也得学。想前后端通吃？再看看http协议。Web精通了？node-webkit 让你可以写桌面程序了，继续学吧。

想学模块化开发？看看CommonJS和AMD规范。理解JS有偏差？看看ECMA-262，等等不知道什么时候第6版就要出了。浏览器各不相同，弄不清该怎么兼容？看看W3C标准，HTML写出来人看的懂，机器读不懂？要SEO，要支持残障人士？看HTML语义化，全会了但IE就是不支持？叫不出名字的浏览器尼玛连JS都不知道是啥？渐进增强。想一次把各种设备全搞定？响应式设计。

然后上面这些不过是一些讨巧的小技术。公司做什么业务的？了解一下行业信息。面向大众的产品？交互设计。美工不给力？UI设计。外包和咨询？设计模式、重构方法、算法、数据结构。知道软件工程吗？了解一下敏捷开发，或许还可以试试TDD、ATDD、BDD。

看了这么多东西，第一反应是不是求中文文档？学英语去吧。

这些也不过是我目前所能看到的一小部分，而且每段基本都是到了一个边界，并不是没得学了，而是继续学又是另一片天地。真心希望有人能帮我填补知识盲区。另外，我仅把一些知识点串起来，不全或不对的地方请见谅。

总体问题：
1.这周学了什么？
2.最近编程遇到什么困难并怎么解决？
3.版本控制？
4.你写一张网页过程的工作流？

首先内容分析，先研究网页中要展示的内容，分清主次及重要程度；然后进行结构设计，搭建合理的HTML结构，保证没有任何CSS的情况下也可以保持可读性，即HTML的语义化，能够让机器也能读懂；接下来布局设计，划分成一个个盒子，将不同页面相同的部分提取出来作为公共模板，使用html+css进行合理布局，细化css的设计；最后进行交互设计，添加交互效果

5.如果有5张不同的样式表，怎么把它们融合在一起?（文件拼合）
使用grunt等自动化构建工具对css进行压缩拼合

6.渐进增强与平稳退化的区别？

7.怎么优化一个网站的资源（图片，css, js）
期待的解决方案包括：
文件合并
文件最小化/文件压缩
使用 CDN 托管
缓存的使用
其他

8.为什么利用多个域名来提供网站资源会更有效？浏览器从同一个站点一次能下载多少资源？

避免域名污染。 当浏览器向服务器请求一个静态资源时,会先发送同域名下的 cookie，服务器对于这些 cookie 不会做任何处理。因此它们只是在毫无意义的消耗带宽。所以你应该确保对于静态内容的请求是无coockie的请求。
浏览器对每个域名的并发链接是有限制的，一般现代浏览器都是6个，使用多个独立域名，可以大大拓展这个并发连接数，也就是令浏览器并行下载更多资源，提高站点性能。
CDN缓存方便

列举3中加快网页加载的方法
图片压缩；css压缩合并（YUI Compressor,CSS gaga）；css sprite,减少HTTP请求

9.图片焦点图页面制作流程，如果不使用js完成可以加分
css3

10.怎么解决文档样式短暂失效（FOUC）？

如果使用import方法对CSS进行导入,会导致某些页面在Windows 下的Internet Explorer出现一些奇怪的现象:以无样式显示页面内容的瞬间闪烁,这种现象称之为文档样式短暂失效(Flash of Unstyled Content),简称为FOUC。原因大致为：1，使用import方法导入样式表。2，将样式表放在页面底部3，有几个样式表，放在html结构的不同位置。其实原理很清楚：当样式表晚于结构性html加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。

解决方法：使用LINK标签将样式表放在文档HEAD中。

11.ARIA和屏幕阅读器？如何让网页可用
12.css动画与js动画的利弊？
13.cors跨域资源共享？

HTML：
1.doctype做什么的？
2.标准模式与混杂模式（兼容模式）的区别？
3.HTML与XHTML的区别？
4.设置Content-type为application/xhtml+xml有什么问题？
5.如何设计多语言网页？
编码UTF-8，空间域名需要支持多浏览地址。
6.设计多语言网页时要注意警惕什么？
应用字符集的选择
7.data-属性擅长做什么？用于自定义属性，可存储私有数据,这些属性集可以通过对象的dataset属性获取，不支持该属性的浏览器可以通过 getAttribute方法获取
8.HTML5最基础的组成部分？
9.cookie,sessionStorage,localStorage的区别？
sessionStorage 、localStorage 和 cookie 之间的区别
共同点：都是保存在浏览器端，且同源的。
区别：
cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。
存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。
作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。
Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。
Web Storage 的 api 接口使用更方便。

7.script,script async,script defer的区别？
常的网页加载流程是这样的。

浏览器一边下载HTML网页，一边开始解析
解析过程中，发现script标签
暂停解析，下载script标签中的外部脚本
下载完成，执行脚本
恢复往下解析HTML网页


defer属性的运行过程是这样的。

浏览器开始解析HTML网页
解析过程中，发现带有defer属性的script标签
浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本
浏览器完成解析HTML网页，此时再执行下载的脚本


async属性的运行过程是这样的。

浏览器开始解析HTML网页
解析过程中，发现带有async属性的script标签
浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本
脚本下载完成，浏览器暂停解析HTML网页，开始执行下载的脚本
脚本执行完毕，浏览器恢复解析HTML网页


8.css为什么要放在head中，js要放在body结束前？
9.什么时图片渐进渲染?
10.HTML模板语言？

CSS：
1.class和ID的区别？
2.reset css和normalize css的区别？
3.浮动的工作原理
4.z-index和层叠上下文怎么形成？
5.BFC的工作原理
6.clear用于什么情况以及各种用法
7.css sprite
8.图片替换技术？喜欢用哪个？
9.浏览器兼容性？css hack?
10.隐藏内容的方式有哪些方式？让内容只是给屏幕阅读器显示？
display,z-index,text-indent,position:absolute,top,left;visibility,overflow

11.栅格系统有什么？
12.媒体查询和适配手机端的布局、CSS?
13.SVG格式的制作？
14.打印网页的优化？
15.如何书写高效CSS？
16.CSS预处理器的优缺点？你使用过的CSS预处理器？
SASS,LESS,Stylus
17.如何实现非标准字体的排版？Webfonts (字体服务例如：Google Webfont)
18.解释下浏览器是怎么确定元素和CSS选择器匹配起来的？
19.伪元素如何工作？用于什么地方？
20.盒子模型？你会怎么告知浏览器在不同模型渲染你的CSS？
21.*{box-sizing:border-box}是干什么的？有点是什么？
22.display属性的值？
23.inline和inline-block的区别？
24.不同position定位的区别？
25.CSS样式表的优先级？如何很好的利用这个机制？
26.用过什么CSS框架？如何改进它们？
27.你玩过新的CSS Flexbox或是Grid specs?如果有，请问在性能和效率的方面你是怎么看的？
28.响应式设计(responsive design)和自适应设计(adaptive design)的区别？
29.兼容 retina 屏幕的经历？用什么技术？
30.在什么情况下使用translate()代替absolute positioning绝对定位，或者反过来，为什么？

Javascript:
1.事件委托机制
2.this如何工作
3.原型继承的实现
4.AMD与CommonJS有什么看法？
5.如何将function foo(){}()变成一个立即执行函数？
6.null,undefined和未经声明的变量的区别？如何检查这些变量类型？
7.闭包时什么，你会怎么使用？
8.匿名函数使用的典型案例？
9.你怎么组织你的代码？模块模式还是类继承？
10.本地对象和宿主对象的区别？
11.function Person(){}, var person = Person(), and var person = new Person()?的区别
12.call,apply的区别
13.Function.prototype.bind？
14.怎么使用document.write()
15.feature detection feature inference以及UA String(用户代理)的区别？ 
16.详细解释ajax
17.jsonp的工作原理，为什么他不算ajax？
18.JavaScript模板？用哪个库？
19.解释变量提升
20.事件冒泡？
21.attribute和property的区别？
22.为什么不要扩展JavaScript的内置对象？
23.load和document ready区别？
24.==和===的区别
25.JavaScript的同源策略？
26.duplicate([1,2,3,4,5]);//[1,2,3,4,5,1,2,3,4,5]
27.为什么叫三元运算符？
28.use strict的优缺点？
29.for()循环100次，3的倍数输出fizz，5的倍数输出buzz，3和5的倍数输出fizzbuzz?
30.为什么使用一下类似load事件，它有什么缺点，有什么替代的方法？
31.什么是单页应用（SPA）？怎么做到SEO优化？
32.使用Promises代替callbacks的利弊(优缺点)？
33.编写一种(其他)语言编译成JavaScript的写法(writing JavaScript code in a language that compiles to JavaScript)有什么优点和缺点？
34.用什么工具调试JavaScript代码？
35.你使用哪种语言构造器(language constructions)来重复遍历对象属性和数组对象？
36.解释下mutable和immutable对象的区别 （可变和不可变）
举一个JavaScript中immutable对象的例子？immutability的利弊？怎么用代码实现immutability?
37.解释下同步方法(synchronous function)和异步方法(asynchronous function)的区别？
38.什么是event loop?call stack和take queue的区别？
39.解释 “JavaScript 模块模式” 以及你在何时使用它。
如果有提到无污染的命名空间，可以考虑加分。
如果你的模块没有自己的命名空间会怎么样？

jQuery：

1.解释"chaining"(连续调用)
2.解释"deferreds"。
3.你知道哪些针对 jQuery 的优化方法。
4.请解释 .end() 的用途。
5.你如何给一个事件处理函数命名空间，为什么要这样做？
6.请说出你可以传递给 jQuery 方法的四种不同值。
选择器（字符串），HTML（字符串），回调函数，HTML元素，对象，数组，元素数组，jQuery对象等。
7.什么是效果队列？
8.请指出 .get()，[]，eq() 的区别。
9.请指出 .bind()，.live() 和 .delegate() 的区别。
10.请指出 $ 和 $.fn 的区别，或者说出 $.fn 的用途。
11.请优化下列选择器：
$(".foo div#bar:eq(0)")

测试问题：
1.测试代码的利弊是什么？
2.你用什么工具来进行代码功能测试？
3.单元测试和功能/集成测试的区别？
4.代码风格检查工具(a coding style linting tool)的目的/作用？

性能问题：
1.你用什么工具去发现检查代码中的性能缺陷？profiler,jsperf,dromaeo
2.有哪些方法去优化网页的滚动性能（website’s scrolling performance）?
3.解释下layout painting以及compositing的区别？

网络问题：
1.一般来说，为什么多域名指向(服务)一个站点会更好？ 
2.尽你所知解释下当你在(浏览器)输入域名到加载，到页面呈现的整个过程？
3.Long-Polling长轮询 WebSocket以及Server-Sent Events的区别？
4.解释下下列请求和返回头信息
	Diff. between Expires, Date, Age and If-Modified-… 
	Do Not Track 
	Cache-Control 
	Transfer-Encoding 
	ETag 
	X-Frame-Options
5.什么是HTTP actions( HTTP 行为？)？列出你所知道的所有HTTP actions并解释？
6.如何基于http协议建立一个长连接？


糟糕的前端工程师是这样做事：
1、滥用JS库，因为他们实际上并不了JS的内部（e.g. 一切都用jQuery）；
2、滥用JS插件，抄别人的代码哪怕自己根本读不懂（e.g.jQuery.doParallaxPls.js）；
3、给Web应用程序添加CSS框架，却只用到CSS/JS的5%，没有看到任何的需求、设计或者比较和评价；
4、认为只要添加了CSS框架，网站就可以「有求必应」；
5、一边在说着「响应式web设计」，却对服务器端技术一无所知；
6、用CSS编程时不管预处理器、命名规范等，却用不合适的selector/ids/magic numbers等；
7、忽视表现、内存泄露（并不理解内存泄露的真正含义），不会检测代码；
8、不会用指标衡量一个产品，或者这种指标旨在自己的电脑、浏览器、设备有效；
9、忽视软件技术。

虽然CS背景并不是成为一个优秀前端工程师的必备条件，但是计算机和软件的基础对你用JS或浏览器编程都非常重要。优秀的前端工程师知道，web可能是最有影响力的平台和环境之一，所以在那里执行的程序必须被小心对待，甚至比在任何一台可视化机器上的任何一种语言更小心。
一位优秀的前端工程师不仅要考虑web技术和语言，并且还要了解所有不同的组件、系统和概念。

以下是优秀的前端工程师在即时面对普通的任务也会做的事情：（这才是市场急需的前端）
1、DNS解析、使用CDN和关于multiple Hostnames as part of resources request.
2、HTTP Headers (Expires, Cache-Control, If-Modified-Since)
3、Steve Souders的所有规则(High Performance Websites)
4、如何解决PageSpeed, YSlow, Chrome Dev Tools Audit, Chrome Dev Tools Timeline显示的所有问题；
5、何时把任务传到服务器和客户端；
6、缓存，预取和负荷技术的使用；
7、Native JS，知道何时从头开始做，何时查找别人的代码，同时可以评估这样做的优缺点；
8、modern MVC Javascript libraries (e.g. AngularJS, EmberJS, ReactJS), graphic libraries (e.g. D3, SnapSVG), DOM manipulation libraries (e.g. jQuery, Zepto), lazy loading or package management libraries (e.g. RequireJS, CommonJS), task managers (e.g. Grunt, Gulp), package managers (e.g. Bower, Componentjs) and testing (e.g. Protractor, Selenium)的相关知识和用法；
9、CSS标准、modern conventions、 strategies (e.g. BEM, SMACSS, OOCSS)的知识和用法；
10、JS的电脑知识（内存管理，单线程的性质，垃圾收集算法，超时，范围，提升，模式）

语言：
1，熟练掌握html5，css3，javascript，ajax
2，掌握PHP、java、python中至少一种web开发语言（不少公司都有特定需求吧，奇虎还招golang）
3，框架/库:MooTools,YUI,Angular,jQuery,Dojo.
4，UI框架：BootStrap,Foundation,Semantic UI,Kendo
5，CSS制作工具/编译器：SaaS/LESS
6，JavaScript服务端运行时:Node.js,Ringo
7，JS模块化规范：AMD,CMD,CommonJS
8，工具:Gulp,Grunt

环境：
1，熟悉Linux开发环境，了解常用工具的使用
2，熟悉svn/git

思想：
1，熟悉W3C标准
2，熟悉表现与数据分离
3，对Web语义化有深刻理解
HTML语义化：
根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。

为什么要语义化？
为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；
用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；
有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；
方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；
便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。

4，掌握响应式设计
5，能够理解数据结构和算法设计
6，具有一定的软件工程意识

工作：
1，追求最佳用户体验
2，工作认真细致，有责任心
3，有激情
4，具备良好的团队合作精神

以上纯属最基本的要求↑

下面是加分项：
1，有自己的技术博客且有干货 +10分
2，参加过开源项目并列出主要贡献 +10分
3，有自己的github +10分
4，github上的项目被fork10+次 +10分
5，处女座 +10分
6，有过相关项目的实习经验并列出主要贡献 +10分

任职资格
精通 JavaScript/CSS/HTML
熟悉至少一种面向对象的前端框架（Google Closure/YUI/MooTools 等）
能够写出高性能、可复用的前端组件
熟悉服务器端开发技术
加分项
了解 CommonJS
熟练使用 JavaScript 测试框架
了解前端安全机制
有前端性能优化经验


技术相关 - 1 面

技术一面主要判断对基础知识的掌握
描述一个你遇到过的技术问题，你是如何解决的？
这个问题很常见，有没有遇到过很不常见的问题？比如在网上根本搜不到解决方法的？
是否有设计过通用的组件？
请设计一个 Dialog（弹出层） / Suggestion（自动完成） / Slider（图片轮播） 等组件
你会提供什么接口？
调用过程是怎样的？可能会遇到什么细节问题？
更细节的问题推荐参考 darcyclarke/Front-end-Developer-Interview-Questions · GitHub
技术相关 - 2 面

技术二面主要判断技术深度及广度
你最擅长的技术是什么？
你觉得你在这个技术上的水平到什么程度了？你觉得最高级别应该是怎样的？
浏览器及性能
一个页面从输入 URL 到页面加载完的过程中都发生了什么事情？越详细越好
（这个问既考察技术深度又考察技术广度，其实要答好是相当难的，注意越详细越好）
谈一下你所知道的页面性能优化方法？
这些优化方法背后的原理是什么？
除了这些常规的，你还了解什么最新的方法么？
如何分析页面性能？
其它
除了前端以外还了解什么其它技术么？
对计算机基础的了解情况，比如常见数据结构、编译原理等

HTML+CSS
1、盒子模型，块级元素和行内元素特性与区别。
2、行内块的使用，兼容性解决。
3、清除浮动的方式以及各自的优劣。
4、文档流的概念、定位的理解以及z-index计算规则&浏览器差异性。
5、CSS选择器以及优先级计算。
6、常用的CSS hack。
7、遇到的兼容性问题与解决方法。
8、垂直水平居中的实现方式。
9、常用布局的实现（两列布局、三列适应布局，两列等高适应布局等）。
Javascript
1、犀牛书封面的犀牛属于神马品种？（蛋逼活跃气氛用。。。）
2、常用的浏览器内核。
3、常用的DOM操作，新建、添加、删除、移动、查找等。
4、String于Array常用方法。
5、设备与平台监测。
6、DOM的默认事件、事件模型、事件委托、阻止默认事件、冒泡事件的方式等。
7、jQuery的bind、live、on、delegate的区别（考察点与上一条重叠，切入点不同）。
8、JS变量提升、匿名函数、原型继承、作用域、闭包机制等。
9、对HTTP协议的理解。
10、Ajax的常用操作，JS跨域的实现原理。


在能力方面：
对 HTML / CSS / JavaScript 具有专家级别的知识；
有较熟练使用 AngularJS / Ember.js / jQuery 或者其它类库的经验；
较熟悉第三方组件（插件）生态环境及具体案例；
有较熟练使用 Jade / Swig / Handlebars / Mustache 或者其它模板引擎的经验；
有较熟练使用 SASS 或者其它 CSS 预处理器的经验；
有较熟练使用 CoffeeScript 的经验；
对 CSS / JavaScript 设计模式有很好的认识及应用；
对常用数据结构和算法熟悉；
有使用 GruntJS / GulpJS 任务运行器的经验；
有使用 Yeoman 生成器的经验；
有诸如 Bower / Volo / JSPM 等前端静态资源包管理器使用经验；
熟悉本地及远程（甄姬）调试操作；
有 Git 的使用经验；

意识驱动行为，所以：
有自己的技术信仰；
有渴望尝试新技术的强烈愿景及较强的主观学习、客观探索能力；
拥有令人难以置信的关注细节的精神；
在诸如 Github、Sitepoint 等这样的技术社区活动；

因为你不是一个人工作，并且要对一个产品付之责任心，所以：
有良好的编程风格和文档习惯；
对模块化开发及相关标准有很好的认识及应用；
有对网页标准和标准制定机构重要性较深刻的理解；
建站过程中考虑其它诸如UI、安全性、高性能、SEO、可维护性以及技术因素等方面；
有跨浏览器（主：兼容性）、跨设备（主：响应式）开发并测试页面的经验；
对网格在WEB设计中的应用有深刻的理解，以及具备系统（有组织）地实现出来的能力；
能够独立工作并做出正确的抉择；
能够适应不断变化的更新 / 扩展 / 改版需求，同时处理多个项目；
能够提供准确的定时估计工作（适应准时交付管理法则）；
有与服务器端程序开发人员协同工作的经验；
能够（熟练）阅读英文资料；
有一定的工作压力承受能力；

然后再为自己从长远打算及加分：
有 NodeJS Web / 服务器 / 客户端应用程序设计、开发、优化经验；
有 MangoDB / Redis 等No SQL 数据库设计、实现、维护经验；
有使用 PhoneGap / Apache Cordova 进行移动应用开发经验；
有浏览器 Addon 扩展（以扩展的形式添加一些为提高用户体验的附加功能）开发经验者；
