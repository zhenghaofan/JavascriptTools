浏览器组成可分两部分：浏览器外壳+内核。

浏览器内核又可以分成两部分：渲染引擎(layout engineer或者Rendering Engine)和JS引擎。
渲染引擎功能作用
       渲染引擎，负责对网页语法的解释（如HTML、JavaScript）并渲染网页。 所以，通常所谓的浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。不同的浏览器内核对网页编写语法 的解释也有不同，因此同一网页在不同的内核的浏览器里的渲染（显示）效果也可能不同，这也是网页编写者需要在不同内核的浏览器中测试网页显示效果的原因。网页浏览器的排版引擎（Layout Engine或Rendering Engine）也被称为浏览器内核、页面渲染引擎或模板引擎，它负责取得网页的内容（HTML、XML、图像等等）、整理消息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。所有网页浏览器、电子邮件客户端以及其它需要根据表示性的标记语言（Presentational markup）来显示内容的应用程序都需要排版引擎。

当前主流四大浏览器内核： 
Trident(IE)，Gecko，Presto，Webkit

JS引擎功能作用
      最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。JavaScript最初由网景公司的Brendan Eich设计，是一种动态、弱类型、基于原型的语言，内置支持类。以它为基础，制定了ECMAScript标 准。JavaScript在浏览器的实现中还必须含有DOM和BOM。Web浏览器一般使用公共 API来创建主机对象来负责将DOM对象反射进JavaScript。JS引擎负责对JavaScript进行解释、编译和执行，以使网页达到一些动态的效果。
主要的网页浏览器JavaScript引擎：
1） Mozilla
Rhino，由Mozilla基金会管理， 开放源代码，完全以Java编写。
SpiderMonkey，第一款JavaScript引擎，由Brendan Eich在Netscape Communications时编写，用于Mozilla Firefox 1.0～3.0版本。
TraceMonkey，基于实时编译的引擎，其中部份代码取自Tamarin引擎，用于 Mozilla Firefox 3.5～3.6版本。
JägerMonkey，（JägerMonkey，也有人拼写成JagerMonkey）德文Jäger原意为猎人，结合追踪 和组合码技术大幅提高效能，部分技术借凿了V8、JavaScriptCore、WebKit，用于Mozilla Firefox 4.0以上版本。
2）Google
V8，开放源代码，由Google丹麦开发，是Google Chrome的一部分。
3）微软
Chakra，中文译名为查克拉，用于Internet Explorer 9。
 JScript 是由微软公司开发的活动脚本语言，是微软对ECMAScript规范的实现.IE 3.0-IE8.0使用的JS引擎
4）其它
KJS，KDE的 ECMAScript/JavaScript引擎，最初由Harri Porten开发，用于KDE项目的 Konqueror网页浏览器中。
Narcissus，开放源代码， 由Brendan Eich编写（他也参与编写了第一个SpiderMonkey）。
Tamarin，由Adobe Labs编写，Flash Player 9所使用的引擎。
Nitro（原名SquirrelFish），为Safari 4编 写。
Carakan，由Opera软件公司编写，自Opera10.50版 本开始使用。

浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。

浏览器的高层结构
浏览器的主要组件为：用户界面、浏览器引擎 - 在用户界面和呈现引擎之间传送指令、
呈现引擎 - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。默认情况下，呈现引擎可显示 HTML 和 XML 文档与图片。通过插件（或浏览器扩展程序），还可以显示其他类型的内容；
网络 - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。
用户界面后端 - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。
JavaScript 解释器即JS引擎。用于解析和执行 JavaScript 代码。
数据存储。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。

Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。
主流程
呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。
呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的 DOM 节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：呈现树。
呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。
呈现树构建完毕之后，进入“布局”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是绘制 - 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。
需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。

    解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。
    解析器和词法分析器的组合，解析的过程可以分成两个子过程：词法分析和语法分析。
    词法分析是将输入内容分割成大量标记的过程。标记是语言中的词汇，即构成内容的单位。在人类语言中，它相当于语言字典中的单词。
    语法分析是应用语言的语法规则的过程。
    解析器通常将解析工作分给以下两个组件来处理：词法分析器（有时也称为标记生成器），负责将输入内容分解成一个个有效标记；而解析器负责根据语言的语法规则分析文档的结构，从而构建解析树。词法分析器知道如何将无关的字符（比如空格和换行符）分离出来。
    解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。
    如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。
    解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 
    解析树的根节点是“Document”对象。

==================
基本流程：

获取 HTML 文档及样式表文件
解析成对应的树形数据结构

DOM tree
CSSOM tree
计算可见节点形成 render tree
计算 DOM 的形状及位置进行布局
将每个节点转化为实际像素绘制到视口上（栅格化）

注意：
render tree（页面上所显示的最终结果）是由 DOM tree（开发工具中所显示的 HTML 所定义的内容结构）与 CSSOM tree（样式表所定义的规则结构）合并并剔除不可见的节点所形成的，其中不包含如下节点：

本身不可见的

<html>
<head>
<meta>
<link>
<style>
<script>
设置了 display: none; 样式的

资源加载：
执行 JavaScript 会阻止 DOM tree 构建
加载 CSS 会阻止 render tree 构建
无论是否为阻止呈现的 CSS，都会被浏览器下载
默认情况下，JavaScript 脚本会在引入它的位置执行（如果是外联脚本则还需要等待加载完毕），这时会阻断 DOM tree 的构建；如果在运行脚本时浏览器尚未完成 CSS 的下载和 CSSOM tree 的构建，浏览器会将脚本执行延迟到这些操作结束之后。

影响性能的因素：
白屏
HTML 和 CSS 的加载及解析速度
<head> 内的脚本加载及执行
首屏
图片加载
<body> 内的脚本加载及执行
render tree 的构建

HTML 的复杂度
CSS 的复杂度
render tree 的绘制（栅格化）

颜色的复杂度
形状的复杂度

提高以下几个方面，总体性能就会得到大幅度提升：

缩短白屏时间；
加快首屏显示；
尽快监听主要操作的事件。
所要达到的理想指标：

60 f/s
优化关键呈现路径

为了在首次渲染时尽可能快，我们需要优化以下三个变量：

最小化关键资源数
最小化关键字节数
最小化关键路径长度
常规步骤：

分析并描述关键路径：资源数、字节数和长度；
减少关键资源的数量：删掉、延迟下载或标记为异步等等；
优化剩余关键资源的加载顺序：尽早下载所有关键资源以缩短关键路径长度；
优化关键字节数以减少下载时间（往返次数）。
搜集性能数据

通过 Navigation Timing API 可以获取浏览器在处理网页的关键步骤的时间戳。



其中，各步骤的意义如下：

domLoading 表示开始解析第一批收到的 HTML 文档的字节
domInteractive 表示完成全部 HTML 的解析并且 DOM 构建完毕
domContentLoaded 表示 DOM 与 CSSOM 皆已准备就绪

如果没有解析器阻塞 JavaScript，DOMContentLoaded 事件会在 domInteractive 之后立即触发
很多 JavaScript 框架会在执行它们自己的逻辑前等待这个事件的触发
domComplete 表示所有的处理都已完成并且所有的附属资源都已经下载完毕
loadEvent 作为网页加载的最后一步以便触发附加的应用逻辑

PageSpeed 规则和建议

排除阻止呈现的 JavaScript 和 CSS
优化 JavaScript 的用法

推荐使用异步 JavaScript 资源
Avoid synchronous server calls
延迟解析 JavaScript
避免运行时间长的 JavaScript
优化 CSS 的用法

将 CSS 放到文档头部
避免使用 CSS import
内联阻止呈现的 CSS

=================
网页的生成过程，大致可以分成五步。
HTML代码转化成DOM
CSS代码转化成CSSOM（CSS Object Model）
结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）
生成布局（layout），即将所有渲染树的所有节点进行平面合成
将布局绘制（paint）在屏幕上

网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。

以下三种情况，会导致网页重新渲染。
修改DOM
修改样式表
用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）

重新渲染，就需要重新生成布局和重新绘制。前者叫做"重排"（reflow），后者叫做"重绘"（repaint）。

"重绘"不一定需要"重排"，比如改变某个网页元素的颜色，就只会触发"重绘"，不会触发"重排"，因为布局没有改变。但是，"重排"必然导致"重绘"，比如改变一个网页元素的位置，就会同时触发"重排"和"重绘"，因为布局改变了。

样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染。
offsetTop/offsetLeft/offsetWidth/offsetHeight
scrollTop/scrollLeft/scrollWidth/scrollHeight
clientTop/clientLeft/clientWidth/clientHeight
getComputedStyle()

从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里面。

// bad
div.style.left = div.offsetLeft + 10 + "px";
div.style.top = div.offsetTop + 10 + "px";

// good
var left = div.offsetLeft;
var top  = div.offsetTop;
div.style.left = left + 10 + "px";
div.style.top = top + 10 + "px";

密集的重新渲染是无法避免的，比如scroll事件的回调函数和网页动画。
网页动画的每一帧（frame）都是一次重新渲染。每秒低于24帧的动画，人眼就能感受到停顿。一般的网页动画，需要达到每秒30帧到60帧的频率，才能比较流畅。如果能达到每秒70帧甚至80帧，就会极其流畅

如果网页动画能够做到每秒60帧，就会跟显示器同步刷新，达到最佳的视觉效果。这意味着，一秒之内进行60次重新渲染，每次重新渲染的时间不能超过16.66毫秒。

下载完html文件 -》构建DOM -》遇到图片image -》发起请求 ->加载完全部图片 -》 dom.onload
                                            |
                                            |这个点已经domcomplete

引入CSS文件后：
                          遇到图片                          
domComplete时间必须等待css解析完成，也就是构建dom树必须等待css解析完成

底部引入JS后：
1 图上显示在引入外部的js文件之后domComplete时间又被延后了，结合上面的renderTree，由于javascript代码可能会更改css属性或者是dom结构，所以在形成renderTree之前必须等待javascript解析完成才能接着构建renderTree。
2 将javascript放在head内和body底部的区别也在于此，放在head里面，由于浏览器发现head里面有javascript标签就会暂时停止其他渲染行为，等待javascript下载并执行完成才能接着往下渲染，而这个时候由于在head里面这个时候页面是白的，如果将javascript放在页面底部，renderTree已经完成大部分，所以此时页面有内容呈现，即使遇到javascript阻塞渲染，也不会有白屏出现。


最终结论：
当浏览器从服务器接收到了HTML文档，并把HTML在内存中转换成DOM树，在转换的过程中如果发现某个节点(node)上引用了CSS或者 IMAGE，就会再发1个request去请求CSS或image,然后继续执行下面的转换，而不需要等待request的返回，当request返回 后，只需要把返回的内容放入到DOM树中对应的位置就OK。但当引用了JS的时候，浏览器发送1个js request就会一直等待该request的返回。因为浏览器需要1个稳定的DOM树结构，而JS中很有可能有代码直接改变了DOM树结构，浏览器为了防止出现JS修改DOM树，需要重新构建DOM树的情况，所以 就会阻塞其他的下载和呈现.
 
这里的结论：
1 在head里面尽量不要引入javascript.
2 如果要在head引入js 尽量将js内嵌.
3 把内嵌js放在所有css的前面.

window.requestAnimationFrame() 方法。它可以将某些代码放到下一次重新渲染时执行