全局函数：
setTimeout()作为第一个参数的函数将会在全局作用域中执行，因此函数内的 this 将会指向这个全局对象。

function Foo() {
    this.value = 42;
    this.method = function() {
        // this 指向全局对象
        console.log(this.value); // 输出：undefined
    };
    setTimeout(this.method, 500);
}
new Foo();

处理可能的阻塞调用:
最简单也是最容易控制的方案，是在回调函数内部使用 setTimeout 函数。
function foo(){
    // 阻塞执行 1 秒
    setTimeout(foo, 100);
}
foo();

这样不仅封装了 setTimeout 回调函数，而且阻止了调用指令的堆积，可以有更多的控制。 foo 函数现在可以控制是否继续执行还是终止执行。
setTimeout()返回一个值，用于clearTimeout()取消这个函数的执行，setInterval()类似
setTimeout()第二个参数为0时，函数不会立刻执行，而是等到所有其他事件处理程序执行完之后再调用
使用setTimeout()的定时器并不是立即执行的，因为JavaScript是单线程环境，不同时间可能有其他代码控制JavaScript进程，所以未执行的代码会被添加到一个代码队列中，给一个定时器设置100ms后执行的代码，是指100ms后会将代码加入到队列中，如果这个队列没有其他代码它会立即执行，否则必须等到进程空闲之后才能执行;使用setInteval()创建的定时器出现某些间隔被跳过，多个定时器间隔比预期小的问题；有可能出现定时器重复的情况，为了避免这种情况，可以用：
setTimeout(function(){
	setTimeout(arguments.callee,100)
},100)
这种代码可以保证两次执行间有足够间隔，避免连续的运行

绝对不要使用字符串作为 setTimeout 或者 setInterval 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个匿名函数，在函数内执行真实的回调函数。

另外，应该避免使用 setInterval，因为它的定时执行不会被 JavaScript 阻塞。

location属性引用Location对象，表示当前文档URL，toString()返回location.href的值；location还拥有protocal,host,hostname,port,pathname,search(?之后的内容)

location.reload()重载当前页面

history属性引用History对象，使用history.back()后退,history.forward()前进，history.go(-1)后退1页

navigator引用Navigator对象，包含浏览器产商，拥有appName,appVersion,userAgent,platform(操作系统)

显示对话框：alert(),confirm(),prompt()等待用户输入信息并获取

更复杂的方法：
showModalDialog()包含HTML格式的对话框

onerror属性是一个事件处理程序，会将错误信息输出到浏览器的JavaScript控制台

HTML文档中以ID属性命名的元素，window对象会赋予一个属性，名字是ID的值，它的值指向这个元素对象；但是如果这个ID已经是window对象拥有的属性或者脚本中定义的变量，则不会发生；以下拥有name属性值得元素也会这样：a,form,iframe,img,object,embed,area

定义短变量名取代长的写法：
var $ = function(id){return document.getElementById(id);};

window.open()打开一个新的窗口，第一个参数url,第二个参数是窗口的名字， 如果一个窗口是另一个窗口的父级，可以使用名字"_top","_parent"来获取彼此的上下文，可以作为a和form元素的target值表示引用的文档，即target可以设置为_blank,_top,_parent

窗体是通过iframe元素创建，可以直接用parent引用父级窗体，iframe中的contentWindow属性引用该窗体的window对象。
通常不通过getElementById()和contentWindow获得子窗体的引用，而是通过window对象的frames属性，
它是一个类数组对象， frames[0]表示引用第一个子窗体，也可以用name或id属性进行索引，如frames['aaa']

顶级窗体创建对象：var a = new AAA(); 子窗体创建对象：var a = new parent.AAA();

