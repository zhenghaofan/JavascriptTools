1.加载和执行：
每次出现script标签都会等待页面解析和执行，无论实在内联还是外链文件中，因为脚本执行过程中可能修改页面内容，所以script必须放页面底部；
减少外链脚本的数量，可以减少HTTP请求
defer: 带有defer属性的脚本在DOM加载完成之前都不会被执行；
如果定义了window.onload = function(){},则在DOM全部加载完之后执行
动态加载JS文件函数：
function loadScript(url, callback) {
  var script = document.createElement('script');
  if (script.readyState) {
    script.onreadystatechange = function(){
      if(script.readyState === 'loaded' || script.readyState === 'complete') {
        script.onreadystatechange = null;
        callback();
      }
    }
  } else {
    script.onload = function() {
      callback()
    }
  }
  script.src = url;
  document.getElementsByTagName('head')[0].appendChild(script)
}

xhr方式：
var xhr = new XMLHttpRequest();
xhr.open('get', 'aa.js', true);
xhr.onreadystatechange = function(){
  if(xhr.readyState === 4 && xhr.status >= 200) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    document.body.appendChild(script)
  }
}

2.数据存取
在执行环境的作用域链中，一个标识符所在的位置越深，读写的速度就越慢，所以全局变量的读写速度是最慢的
闭包：
IE中可能导致内存泄露
在for in 循环一个对象时，可以用hasOwnProperty减少遍历原型对象
location.href 比 window.location.href要快
使用局部变量保存经常使用的变量

3.DOM
浏览器把DOM和JavaScript独立实现，所以JS每次访问DOM，都会通过接口访问，访问次数越多，速度越慢
所以尽量把DOM操作合并，作为一次性操作，使用innerHTML
HTML集合都是非常昂贵的对象，如document.getElementsByName()...,优化方法是将集合长度缓存到一个变量中
遍历某个DOM元素的所有子节点：
function wald(){
  var el = document.getElementById('aa'),
    ch = el.childNodes,
    len = ch.length,
    name = '';
    for (var count = 0; count < len; count++) {
      name = ch[count].nodeName
    }
    return name
}

重绘和重排：
浏览器加载后形成DOM树、CSSOM树、绘制树；当元素的一些属性改变时，浏览器要重新计算元素的几何属性，会导致重排，重排之后必导致重绘；
重排会产生计算消耗，获取布局信息的操作会导致刷新重排队列，如：
offsetTop, offsetLeft, offsetWidth, offsetHeight
scrollTop, scrollLeft, scrollWidth, scrollHeight
client...............................
getComputedStyle(), currentStyle
优化下面代码：
var el = document.getElementById('aa');
el.style.borderLeft = '1px';
el.style.borderRight = '2px';
el.style.padding = '5px'
改为：
el.style.cssText = 'border-left.....'; 或 el.className = 'newclass'
减少重排重绘：使元素脱离文档流
方法：
①隐藏元素，修改后重新显示
②使用document fragment,最后通过appendChild(fragment)
优化下面代码：
myelement.style.left = myelement.offsetLeft + 1 + 'px'
改为：
var currentLeft = myelement.offsetLeft;
currentLeft++;
myelement.style.left = current + 'px'
if(current > 500) {
stopAnimation()
}

4.算法和流程
使用倒序循环：
var i = items.length;
while(i==) {
...
}
for(var j=items.length; j>0; j--) {
...
}
简单归并排序：
function merge(left, right) {
  var res = [];
  while(left.lenght > 0 && right.length > 0) {
    if(left[0] < right[0]) {
      result.push(left.shift())
    } else {
      result.push(right.shift())
    }
  }
  return result.concat(left).concat(right)
}
递归实现：
function mergeSort(items) {
  if (items.length == 1) {
    return items
  }
  var middle = Math.floor(items.length / 2),
  left = items.slice(0, middle),
  right = items.slice(middle);
  return merge(mergeSort(left), mergeSort(right))
}
循环实现：
function mergeSort(items) {
  if (items.length == 1) {
    return items
  }
  var work = [];
  for (var i = 0, len = items.length; i<len;i++) {
    work.push(items[i]);
  }
  work.push([]);
  for (var lim=len; lim > 1; lim = (lim+1)/2) {
    for (var j=0,k=0; k<lim; j++, k+=2) {
      work[j] = merge(work[k], work[k+1])
    }
    work[j] = []
  }
  return work[0]
}

web worker能使代码运行而不占用浏览器UI线程的时间
例子：解析一个很大的字符串; 复制数学运算；大数组排序
var worker = new Worker('jsonParser.js')
worker.onmessage = function (e) {
var jsonData = e.data;
};
worder.postMessage(jsonText);

使用XHR时，get和post的对比：
get请求的数据会被缓存，当参数过长时使用post; 对于少量数据而言，一个GET请求更快，只发送一个数据包，而post请求要发送两个
缓存：
服务器端设置Expires头信息

操作32位数字的加减法：使用位运算
