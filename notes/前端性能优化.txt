从用户输入url到显示页面发生了什么：
1.当用户输入网页 URL 的时候，这时浏览器会对 URL 进行检查，首先判断协议，如果是 http 就按照 Web 来处理，另外还会对这个 URL 进行安全检查，接着浏览器内核调用其资源加载器（某个方法）加载该 URL 对应的网页。

2.通过 DNS 查询 IP、通过 Socket 发送数据，加载器依赖网络模块建立连接，发送请求并接收答复。

3.服务器返回数据，浏览器接收到各种网页或者资源的数据，其中某些资源可能是同步或异步获取的。

4.网页被交给 HTML 解释器转变成一系列的词语（Token）。

5.解释器根据词语构建节点（Node），形成 DOM 树。

6.如果节点是 JavaScript 代码的话，调用 JavaScript 引擎解释并执行。当html解析器遇到没有defer和async的script时，把这个元素添加到文档中，并执行脚本，JavaScript 代码可能会修改 DOM 树的结构, 脚本可以通过document.write写入文档输入流中。 而如果是async异步脚本，则解析器会继续往下解析，脚本继续下载

7.如果节点需要依赖其他资源，例如图片、CSS、视频等，调用资源加载器来加载它们，但是它们是异步的，不会阻碍当前 DOM 树的创建，直到 JavaScript 的资源加载并被 JavaScript 引擎执行后才继续 DOM 树的创建。

====================================
http属于Tcp/Ip模型中的应用层协议

首先，浏览器找到该网址所指向的IP，然后与其建立TCP连接，连接建立之后发送HTTP请求

接着向百度服务器提出Get请求，

当服务器接收到我们的请求后，

向我们传送应答信息--百度的页面,

然后断开连接。

浏览器找到该网址所指向的IP，然后与其建立TCP连接
   1、获取IP。浏览器地址栏中输入"http://www.xxx.edu.cn/"并提交之后，首先它会在DNS本地缓存表中查找，如果有则直接告诉IP地址。如果没有则要求网关DNS进行查找，如此下去，当找到对应的ip后，则返回给浏览器。
   2、建立TCP连接。当获取到IP之后，就开始与所请求的服务器建立TCP连接，你可以在下图中发现syn,ack，这些标识符就是用来同步用的。
   3、连接建立后，就向服务器发出http请求


渲染过程：
脚本执行,计算样式，计算布局，绘制，合并绘制层
只修改不影响布局的css,例如background,color,shadow，可跳过计算布局阶段
只修改非布局且非绘制的CSS属性可以跳过计算布局和绘制阶段


前端性能优化：
1.减少HTTP请求，压缩合并资源：
因为浏览器并发请求资源的进程数是有限的，必须减少http请求；每次请求都要历经三次握手，开销比较大，所以必须减少请求：
合并脚本和样式，将所有脚本样式合并为一个；
CSS Sprite;
使用base64 url 可以减少一次HTTP请求，在background-image中，是用于图片不是很大，不经常更新， 不能CSS Sprite;
使用图标字体

可以将Data URL形式的图片存储在CSS样式表中或者localstorage。 而所有浏览器都会积极的缓存CSS文件来提高页面加载效率。
只要这个图片不是很大，而且不是在CSS文件里反复使用，就可以以Data URL方法呈现图片降低页面的加载时间，改善用户的浏览体验。

2.客户端处理,DOM结构优化：
CSS顶部，JS底部；
内容，行为，样式分离；实现结构、样式、行为分离，独立成文件可以利用浏览器缓存。
DOM元素的读写分离与批量操作，降低样式计算的范围和复杂度，读取计算所需的DOM属性，执行计算逻辑，批量修改DOM
JS控制的动画效果 使用requestAnimateFrame代替setTimeout和setInterval；
提升动画中移动或渐变元素的绘制层，应用了transform|opacity|backface-visibility的元素会独占一个渲染层, 从而跳过绘制阶段；提升动画元素到新的绘制层：
transform: translateZ(0);可以让CPU硬件加速
will-change: auto | scroll-position | contents | opacity | [ transform | left, top ] ; will-change: transform;
使用ajax响应用户的部分操作而不需刷新页面

CSS渲染、页面重绘repant以及回流重新布局：
尽量避免类似.a.b{}.list a{}以及其他一些复杂选择器，以提高整站整体CSS渲染；
简化CSS reset;
图片设定固定不响应重绘的尺寸，防止图片过大完全加载；
具有复杂动画的元素绝对定位-脱离文档流，避免强烈的回流。
现代浏览器可以渐进使用CSS3 transition实现动画效果，比改变像素值来的高性能

3.多域名代替单域名，IE7可用指向同一台服务器但不同域名来提高每次页面的请求数；根据域名划分内容
img1.aaa.com,img2.aaa.com比img.aaa.com更高效

4.浏览器本地缓存，local Storage
HTTP头信息缓存，设置Expires响应头过期时间，设置Cache-Control
http响应头信息Expires、Cache-Control是缓存字段。这里的缓存是指浏览器缓存，缓存过期前不用发起请求。Cache-Control，用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。
请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、max-age、max-stale、min-fresh、only-if-cached;
响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage.

    使用Etag，它是用于验证内容是否改变的被请求变量的实体值；是一个可以与Web资源关联的记号（token）。典型的Web资源可以一个Web页，但也可能是JSON或XML文档。服务器单独负责判断记号是什么及其含义，并在HTTP响应头中将其传送到客户端，如果ETag没改变，则返回状态304然后不返回，这也和Last-Modified一样。

    聪明的服务器开发者会把ETags和GET请求的“If-None-Match”头一起使用，这样可利用客户端（例如浏览器）的缓存。因为服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。
    其过程如下：
    客户端请求一个页面（A）。 服务器返回页面A，并在给A加上一个ETag。 客户端展现该页面，并将页面连同ETag一起缓存。 客户再次请求页面A，并将上次请求时服务器返回的ETag一起传递给服务器。 服务器检查该ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304（未修改——Not Modified）和一个空的响应体。

    请求流程：
    Etag由服务器端生成，客户端通过If-Match或者说If-None-Match这个条件判断请求来验证资源是否修改。常见的是使用If-None-Match.请求一个文件的流程可能如下：
    ====第一次请求===
    1.客户端发起 HTTP GET 请求一个文件；
    2.服务器处理请求，返回文件内容和一堆Header，当然包括Etag(例如"2e681a-6-5d044840")(假设服务器支持Etag生成和已经开启了Etag).状态码200
    ====第二次请求===
    1.客户端发起 HTTP GET 请求一个文件，注意这个时候客户端同时发送一个If-None-Match头，这个头的内容就是第一次请求时服务器返回的Etag：2e681a-6-5d044840
    2.服务器判断发送过来的Etag和计算出来的Etag匹配，因此If-None-Match为False，不返回200，返回304，客户端继续使用本地缓存；
    流程很简单，问题是，如果服务器又设置了Cache-Control:max-age和Expires呢，怎么办？
    答案是同时使用，也就是说在完全匹配If-Modified-Since和If-None-Match，检查完修改时间和Etag之后，服务器才能返回304.。

5.压缩文件，服务器启用gzip文件压缩
6.CDN
7.延迟加载，提前加载
8.减少cookie大小

过程：
loading -> scripting -> rendering ->painting

移动端：
保持单个文件内容小于25KB
